name: Build and Release

on:
  push:
    tags:
      - '*.*.*'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Build'
        required: true
        default: 'Manual deployment'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20.x]

    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Check Credentials
        run: |
          echo "GH_TOKEN = ${{ env.GH_TOKEN }}"
          if [ -z "${{ env.GH_TOKEN }}" ]; then
            echo "Error: Credential for GitHub is not set. Current value '${{ env.GH_TOKEN }}'."
            exit 1
          fi
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if Release Exists
        id: check_release
        run: |
          if gh release view ${{ github.ref_name }} > /dev/null 2>&1; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
        shell: bash

      - name: Create Release
        if: env.RELEASE_EXISTS == 'false' && matrix.os == 'macos-latest'
        id: create_release
        run: |
          gh release create ${{ github.ref_name }} --title "${{ github.ref_name }}" --notes "Release ${{ github.ref_name }}"
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Install GitHub CLI for ${{ matrix.os }}
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            sudo apt-get install gh -y
          elif [ ${{ matrix.os }} == 'macos-latest' ]; then
            brew install gh
          elif [ ${{ matrix.os }} == 'windows-latest' ]; then
            choco install gh
          fi
        shell: bash

      - name: Build Electron App
        run: npm run build

      - name: Get Release Upload URL
        run: echo "RELEASE_UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV
        if: steps.create_release.outputs.upload_url != ''
      
      # Windows
      - name: Upload Windows Assets
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/**/Play-Factory-Windows-${{ github.ref_name }}.exe
            release/**/Play-Factory-Windows-${{ github.ref_name }}.exe.blockmap
            release/**/latest.yml
            release/**/builder-debug.yml
        env:
          GITHUB_TOKEN: ${{ env.GH_TOKEN }}
          UPLOAD_URL: ${{ env.RELEASE_UPLOAD_URL }}

      # Linux
      - name: Upload Linux Assets
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/**/latest-linux.yml
            release/**/Play-Factory-Linux-${{ github.ref_name }}.deb
        env:
          GITHUB_TOKEN: ${{ env.GH_TOKEN }}
          UPLOAD_URL: ${{ env.RELEASE_UPLOAD_URL }}

      # macOS
      - name: Upload macOS Assets
        if: matrix.os == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/**/Play-Factory-Mac-${{ github.ref_name }}-universal.dmg
            release/**/Play-Factory-Mac-${{ github.ref_name }}-universal.blockmap
            release/**/latest-mac.yml
        env:
          GITHUB_TOKEN: ${{ env.GH_TOKEN }}
          UPLOAD_URL: ${{ env.RELEASE_UPLOAD_URL }}
